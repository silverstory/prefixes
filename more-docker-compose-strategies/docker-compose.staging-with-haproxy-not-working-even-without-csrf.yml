version: "3.3"
services:
  secret-simulator:
    image: mikesir87/secrets-simulator
    volumes:
      - secrets:/run/secrets:rw
    environment:
      JWT_SECRET: your-jwt-secret
      DB_MODE: STAGING
      DB_HOST: your-mongo-host-ip
      DB_NAME: your-mongo-database-name
      DB_USER_NAME: your-mongo-app-user
      DB_PASSWORD: your-mongo-app-password
    networks:
      - webnet
  web:
    image: iameprel/angular
    user: root
    working_dir: /usr/src/app
    # when using just a mounted secret folder
    # volumes:
    #   - ./secrets:/run/secrets
    # I prefer something more easy like this
    volumes:
      - secrets:/run/secrets:ro
    # build is ignored on stack deploy to swarm
    # build: .
    ports:
      - 4000:3000
    environment:
      # added SERVICE_PORTS for usage on haproxy
      - SERVICE_PORTS=4000
      - NODE_ENV=development
    deploy:
      replicas: 20
      update_config:
        parallelism: 5
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  proxy:
    image: dockercloud/haproxy
    depends_on:
      - iameprel/angular
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
volumes:
  secrets:
    driver: local
networks:
  webnet:
    driver: overlay

# Pre-steps
# If mongo db is not installed on local staging machine
# do
# sudo mkdir /data
# sudo mkdir /data/db
# sudo chmod a+rwx -R /data
# sudo chmod a+rwx -R /data/db
# docker-compose -f docker-compose.mongo-only.yml up -d

# Initial deploy to cluster
# git pull origin master
# docker build -t image:tag .
#            e.g: angular:1.0.0
# docker tag angular local-registry:port/repo:tag
# docker push local-registry:port/repo:tag
# set docker-compose.yml > image: should be > local-registry:port/repo:tag
# docker stack deploy -c docker-compose.yml stage
# note: if no tag is set on repo, the tag 'latest' is used

# New version deployment on cluster
# git pull origin master
# docker build -t image:tag .
#            e.g: angular:1.0.1
# docker tag angular local-registry:port/repo:tag
# docker push local-registry:port/repo:tag
# set docker-compose.yml > image: should be > local-registry:port/repo:tag
# docker service update --image image:tag stage_angular
#                          e.g: angular:1.0.1

# SCALING
# Scale the cluster service to add 30 more containers
# docker service scale prod_angular=50