version: "3.3"
services:
  secret-simulator:
    image: mikesir87/secrets-simulator
    volumes:
      - secrets:/run/secrets:rw
    environment:
      JWT_SECRET: your-jwt-secret
      DB_MODE: your-db-mode
      DB_HOST: your-host-ip
      DB_NAME: your-database-name
      DB_USER_NAME: your-mongo-root-user
      DB_PASSWORD: your-mongo-root-password
  web:
    # image repo: iameprel/ngtohassidslb:1.0.0 or local-registry:port/repo-image:tag
    #             for development just use name angular
    image: iameprel/angular
    user: root
    working_dir: /usr/src/app
    # when using just a mounted secret folder
    # volumes:
    #   - ./secrets:/run/secrets
    # I prefer something more freakin easy not to mention awesome
    volumes:
      - secrets:/run/secrets:ro
    # build is ignored on stack deploy to swarm
    # build: .
    ports:
      - 4000:3000
    environment:
      # added SERVICE_PORTS for usage on haproxy
      - SERVICE_PORTS=4000
      - NODE_ENV=development
    deploy:
      replicas: 20
      update_config:
        parallelism: 5
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
    # links are ignored on stack deploy to swarm
    # links:
    #   - mongoDb:mongoDb
    depends_on:
      - mongoDb
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  # Please REMOVE all the mongoDB service section when deploying in PRODUCTION
  mongoDb:
    image: mongo:3.7
    environment:
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_ROOT_USERNAME=mongo-root-user
      - MONGO_INITDB_ROOT_PASSWORD=mongo-root-password
    volumes:
      - /data/db:/data/db:rw
      # if you wish to setup additional user accounts specific per DB or with different roles you can use following entry point
      # just create docker-entrypoint.sh file and follow the instructions online
      # - ./mongo-entrypoint/:/docker-entrypoint-initdb.d/
    ports:
      - 27017:27017
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
    # This does not enforce authentication.
    # command: mongod
    # This here enforces the need for authentication.
    command: mongod --auth --smallfiles --port 27017 --dbpath /data/db --logpath=/dev/null --quiet
  proxy:
    image: dockercloud/haproxy
    depends_on:
      - angular
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
    networks:
      - webnet
    deploy:
      placement:
        constraints: [node.role == manager]
volumes:
  secrets:
    driver: local
networks:
  webnet:
    driver: overlay

# Initial deploy to cluster
# git pull origin master
# docker build -t image:tag .
#            e.g: angular:1.0.0
# docker tag angular local-registry:port/repo:tag
# docker push local-registry:port/repo:tag
# set docker-compose.yml > image: should be > local-registry:port/repo:tag
# docker stack deploy -c docker-compose.yml stage
# note: if no tag is set on repo, the tag 'latest' is used

# New version deployment on cluster
# git pull origin master
# docker build -t image:tag .
#            e.g: angular:1.0.1
# docker tag angular local-registry:port/repo:tag
# docker push local-registry:port/repo:tag
# set docker-compose.yml > image: should be > local-registry:port/repo:tag
# docker service update --image image:tag stage_angular
#                          e.g: angular:1.0.1

# SCALING
# Scale the cluster service to add 30 more containers
# docker service scale prod_angular=50